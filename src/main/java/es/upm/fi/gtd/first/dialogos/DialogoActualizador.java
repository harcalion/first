/*
 * DialogoActualizador.java
 *
 * Created on 13 de mayo de 2008, 22:56
 */

package es.upm.fi.gtd.first.dialogos;

import es.upm.fi.gtd.first.Actualizador;
import java.awt.Color;
import java.awt.Component;
import java.util.List;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author  Alvar
 */
public class DialogoActualizador extends javax.swing.JDialog implements Runnable {
String textoCaja;
boolean actualizar = false;
Actualizador actual;
private static final long serialVersionUID = 1L;
/** Creates new form DialogoActualizador
 * @param parent Cuadro padre para dibujar el diálogo
 * @param modal true si es un diálogo modal, false en caso contrario
 * @param act Instancia de la clase de actualización
 */
    public DialogoActualizador(java.awt.Frame parent, Actualizador act, boolean modal) {
        super(parent, modal);
        actual = act;
        initComponents();
        
    }

    /**
     * Activa el botón de actualización
     */
    public void activarBoton() {
        jButton1.setEnabled(true);
    }

    /**
     * Establece nuevos valores para la tabla
     * @param texto Nuevos valores
     */
    public void setTexto(List<String []> texto)
    {
        
        String [][] datos = new String [texto.size()][3];
        texto.toArray(datos);
       jTable2.setModel(new javax.swing.table.DefaultTableModel(
            datos,
            new String [] {
                "Nombre", "Versión Local", "Versión Remota"
            }
        ));
       for (int i = 0; i < jTable2.getColumnCount(); i++)
        jTable2.getColumnModel().getColumn(i).setCellRenderer(new ActualizacionRenderer());
       //resaltarActualizaciones();
       
    }
    
    

    
    private void resaltarActualizaciones ()
    {
        DefaultTableModel dtm = (DefaultTableModel) jTable2.getModel();
        String v1,v2;
        for (int i = 0; i < dtm.getRowCount(); i++)
        {
            v1 = (String) dtm.getValueAt(i, 2);
            v2 = (String) dtm.getValueAt(i, 3);
            if (v1.compareTo(v2) != 0)
            {
               
            }
                
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Actualizar FIRST");

        jButton1.setText("Actualizar");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nombre", "Versión Local", "Versión Remota"
            }
        ));
        jScrollPane1.setViewportView(jTable2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(jButton1)
                        .addGap(31, 31, 31)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(54, 54, 54))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
actual.descargarActualizaciones();

}//GEN-LAST:event_jButton1ActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

    this.setVisible(false);
}//GEN-LAST:event_jButton2ActionPerformed

    /**
    * @param args the command line arguments
    */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        
    }

    

}
    class ActualizacionRenderer extends DefaultTableCellRenderer {
    
    private static final long serialVersionUID = 1L;    
        
    public ActualizacionRenderer() { super(); }
        @Override
public Component getTableCellRendererComponent(JTable table, Object value,
    boolean isSelected, boolean hasFocus, int row, int column)
  {
    String v1 = (String) table.getValueAt(row, 1);
    
    String v2 = (String) table.getValueAt(row, 2);
    
    //this.setOpaque(true);
    this.setValue(value);
    if (isSelected) {            
        setForeground(table.getSelectionForeground());        
        setBackground(table.getSelectionBackground());
    }
    else {
        setForeground(Color.BLACK);
        if (v1.compareTo(v2)!=0) {
            setBackground(Color.red);
        } 
        else setBackground(table.getBackground());
    }
    return this;
  }
}
